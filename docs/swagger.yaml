openapi: 3.0.0
info:
  title: KYC Verification API
  version: 1.0.0
  description: API for KYC verification and risk assessment
  contact:
    name: API Support
    email: support@example.com

servers:
  - url: http://localhost:3001/api/v1
    description: Development server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        firstName:
          type: string
        lastName:
          type: string
        role:
          type: string
          enum: [user, verifier, admin]
        status:
          type: string
          enum: [active, inactive]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    KYCVerification:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        type:
          type: string
          enum: [individual, corporate]
        status:
          type: string
          enum: [pending, in_progress, approved, rejected, expired]
        documentType:
          type: string
        documentNumber:
          type: string
        documentExpiryDate:
          type: string
          format: date
        documentFrontUrl:
          type: string
        documentBackUrl:
          type: string
        selfieUrl:
          type: string
        verificationData:
          type: object
        riskScore:
          type: number
        riskFactors:
          type: array
          items:
            type: string
        verificationNotes:
          type: string
        verifiedBy:
          type: string
          format: uuid
        verifiedAt:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Document:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        kycVerificationId:
          type: string
          format: uuid
        type:
          type: string
          enum: [id_card, passport, drivers_license, utility_bill, bank_statement, selfie, other]
        status:
          type: string
          enum: [pending, verified, rejected, expired]
        fileName:
          type: string
        fileUrl:
          type: string
        fileSize:
          type: integer
        mimeType:
          type: string
        metadata:
          type: object
        verificationNotes:
          type: string
        verifiedBy:
          type: string
          format: uuid
        verifiedAt:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    RiskAssessment:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        kycVerificationId:
          type: string
          format: uuid
        overallRiskScore:
          type: number
        riskLevel:
          type: string
          enum: [low, medium, high, critical]
        riskFactors:
          type: array
          items:
            type: object
        assessmentDate:
          type: string
          format: date-time
        expiryDate:
          type: string
          format: date-time
        assessmentNotes:
          type: string
        assessedBy:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

paths:
  /users/register:
    post:
      summary: Register a new user
      tags: [Users]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - firstName
                - lastName
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 8
                firstName:
                  type: string
                lastName:
                  type: string
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input data

  /users/login:
    post:
      summary: Login user
      tags: [Users]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Invalid credentials

  /users/me:
    get:
      tags:
        - Users
      summary: Get current user profile
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'

  /kyc/submit:
    post:
      summary: Submit KYC verification
      tags: [KYC]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - type
                - documentType
                - documentNumber
                - documentExpiryDate
                - documentFrontUrl
                - documentBackUrl
                - selfieUrl
              properties:
                type:
                  type: string
                  enum: [individual, corporate]
                documentType:
                  type: string
                documentNumber:
                  type: string
                documentExpiryDate:
                  type: string
                  format: date
                documentFrontUrl:
                  type: string
                documentBackUrl:
                  type: string
                selfieUrl:
                  type: string
      responses:
        '201':
          description: KYC verification submitted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KYCVerification'
        '400':
          description: Invalid input data
        '401':
          description: Unauthorized

  /documents:
    post:
      tags:
        - Documents
      summary: Upload document
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
                - type
                - kycVerificationId
              properties:
                file:
                  type: string
                  format: binary
                type:
                  type: string
                  enum: [id_card, passport, drivers_license, utility_bill, bank_statement, selfie, other]
                kycVerificationId:
                  type: string
                  format: uuid
      responses:
        '201':
          description: Document uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'

  /risk:
    get:
      tags:
        - Risk Assessment
      summary: Get risk assessment by ID
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Risk assessment retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RiskAssessment' 